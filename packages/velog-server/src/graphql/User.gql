type User {
  id: ID!
  username: String!
  email: String
  created_at: Date!
  updated_at: Date!
  is_certified: Boolean!
  profile: UserProfile!
  velog_config: VelogConfig
  series_list: [Series!]!
  user_meta: UserMeta
}

type UserProfile {
  id: ID!
  display_name: String!
  short_bio: String!
  thumbnail: String
  created_at: Date!
  updated_at: Date!
  about: String!
  profile_links: JSON!
}

type VelogConfig {
  id: ID!
  title: String
  logo_image: String
}

type UserMeta {
  id: ID!
  email_notification: Boolean
  email_promotion: Boolean
}

type UserToken {
  accessToken: String!
  refreshToken: String!
}

type Query {
  # user(id: ID, username: String): User
  # velog_config(username: String): VelogConfig
  currentUser: User
  restoreToken: UserToken
  # unregister_token: String
  # emailExists(email: String!): boolean

  followers: [User!]!
  followings: [User!]!
}

type Mutation {
  # update_about(about: String!): UserProfile
  # update_thumbnail(url: String): UserProfile
  # update_profile(display_name: String!, short_bio: String!): UserProfile
  # update_velog_title(title: String!): VelogConfig
  # update_social_info(profile_links: JSON!): UserProfile
  # update_email_rules(notification: Boolean!, promotion: Boolean!): UserMeta
  # unregister(token: String!): Boolean
  logout: Void
  # acceptIntegration: String!
  # initiateChangeEmail(email: String!): Boolean
  # confirmChangeEmail(code: String!): Boolean

  follow(input: FollowInput!): Boolean
  unfollow(input: UnfollowInput!): Boolean
}

input FollowInput {
  followUserId: ID
}

input UnfollowInput {
  followUserId: ID
}
